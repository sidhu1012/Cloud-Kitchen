# -*- coding: utf-8 -*-
"""LOC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11jsvV6eD4QNfzUa0iWu6V0idgM92vMWU
"""

import pandas as pd
import numpy as np

hotels = pd.read_csv('Delhi.csv')

hotels = hotels.drop_duplicates('lat-long')

df = hotels[ hotels['lat-long'] != 'No Location']

lat = []
ln = []

for i in df['lat-long'].astype('string'):
  a= i.split(',')
  lat.append(float(a[0]))
  ln.append(float(a[1]))

df['lat'] = lat
df['long'] = ln

df = df[ df['lat'] > 0 ]
df = df[ df['long'] > 0 ]

X = df[['lat','long']].values

from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_samples, silhouette_score

s=np.zeros((100))
i = 0
K = range(10,100)
for t in K:
  model = KMeans(n_clusters=t,max_iter=500).fit_predict(X)
  s[i] = silhouette_score(X, model)
  i+=1

k = s.argmax()+10
model = KMeans(n_clusters=k,max_iter=500).fit(X)

centroids = model.cluster_centers_

labels = model.labels_

labels_unique = np.unique(labels)
n_clusters_ = len(labels_unique)

df['Labels'] = labels

from math import radians, cos, sin, asin, sqrt

def distance(lat1, lat2, lon1, lon2): 
          
    lon1 = radians(lon1) 
    lon2 = radians(lon2) 
    lat1 = radians(lat1) 
    lat2 = radians(lat2) 
       
    dlon = lon2 - lon1  
    dlat = lat2 - lat1 
    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
  
    c = 2 * asin(sqrt(a))  
     
    r = 6371
       
    return(c * r)

dist = []
for x,y,k in df[['lat','long','Labels']].values:
    dist.append(distance(x, centroids[int(k)][0], y, centroids[int(k)][1]))

df['Distance from centroid(in km)'] = dist

import requests, json

url = 'https://trueway-geocoding.p.rapidapi.com/ReverseGeocode'
headers = {
    'x-rapidapi-host': "trueway-geocoding.p.rapidapi.com",
    'x-rapidapi-key': "1eb77e4efamsh65d52aca83a4adcp1a8b92jsnb215dd39d530"
    }

import time
loc = []
for i,j in centroids:
  querystring = {"language":"en","location":str(i)+"%2C"+ str(j)}
  r = requests.request("GET", url, headers=headers, params=querystring)
  #print(r.text)
  x = r.json() 
  y=x['results']
  if len(y)>0:
    if 'address' in y[0]:
      loc.append(y[0]['address'])
    else:
      loc.append(y[1]['address'])
  else:
    loc.append(np.nan) 
  time.sleep(1)

ad = []
for i in df['Labels']:
    ad.append(loc[i])

df['Centroid Address'] = ad

col = df.columns
if 'Unname:0' in col:
  df = df.drop(columns = ['lat-long','Unnamed:0'])
else:
  df = df.drop(columns = ['lat-long'])

df.to_csv('Location.csv')

count_list = []
for i in labels_unique:
  count = 0
  for j in df['Labels']:
    if i==j:
      count+=1
  count_list.append(count)

cent = pd.DataFrame()
cent['Location'] = loc
cent['Label'] = labels_unique 
cent['Label_Count'] = count_list

cent.to_csv('Location_Key.csv')

!pip install gmplot

import gmplot

c1 = []
c2 = []
for i,j in centroids:
  c1.append(i)
  c2.append(j)

gmap = gmplot.GoogleMapPlotter(28.7041, 77.1025,10)
gmap.scatter(df['lat'].values, df['long'].values,size = 40, marker = False)
gmap.scatter(c1,c2,size = 80, color = 'red', marker = True)
gmap.draw('map.html')

